{"version":3,"sources":["components/AirportSelector/AirportSelector.js","services/AirportService/airportService.js","components/Search/Search.js","reportWebVitals.js","index.js"],"names":["throttled","throttle","searchTerm","fetch","then","response","json","getAirportsByTerm","AirportSelector","inputLabel","onError","onChange","name","useState","inputValue","setInputValue","useQuery","error","data","Autocomplete","id","options","locations","getOptionLabel","option","renderInput","params","TextField","label","variant","onInputChange","_event","newInputValue","e","useStyles","makeStyles","theme","paper","marginTop","spacing","form","width","submit","margin","Search","classes","useForm","control","handleSubmit","setValue","errors","formState","Container","component","maxWidth","CssBaseline","className","Typography","onSubmit","console","log","noValidate","Grid","container","item","xs","sm","defaultValue","rules","required","render","from_airport","Button","type","fullWidth","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.aad86a65.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { getAirportsByTerm } from \"../../services/AirportService/airportService\";\nimport throttle from \"lodash.throttle\";\nimport { useQuery } from \"react-query\";\n\nconst throttled = throttle((searchTerm) => getAirportsByTerm(searchTerm), 200);\n\nexport const AirportSelector = ({ inputLabel, onError, onChange, name }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const { error, data } = useQuery([\"airportData\", { inputValue }], () =>\n    throttled(inputValue)\n  );\n\n  if (error) {\n    onError(error);\n  }\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      options={data && data.locations ? data.locations : []}\n      getOptionLabel={(option) => option.name}\n      renderInput={(params) => (\n        <TextField {...params} label={inputLabel} variant=\"outlined\" />\n      )}\n      onInputChange={(_event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      onChange={(e, options) => {\n        if (onChange) {\n          onChange(name, options);\n        }\n      }}\n    />\n  );\n};\n","export const getAirportsByTerm = (searchTerm) => {\n  return fetch(\n    `https://api.skypicker.com/locations?location_types=airport&term=${searchTerm}`\n  ).then((response) => response.json());\n};\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { AirportSelector } from \"../AirportSelector/AirportSelector\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport const Search = () => {\n  const classes = useStyles();\n  const {\n    control,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Search Flights\n        </Typography>\n\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className={classes.form}\n          noValidate\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <Controller\n                name=\"from_airport\"\n                control={control}\n                defaultValue={null}\n                rules={{ required: true }}\n                render={() => (\n                  <AirportSelector\n                    name=\"from_airport\"\n                    inputLabel=\"From\"\n                    onChange={setValue}\n                  />\n                )}\n              />\n              {errors.from_airport && \"From is required\"}\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <AirportSelector inputLabel=\"To\" />\n            </Grid>\n          </Grid>\n\n          <Button\n            className={classes.submit}\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Search\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Search } from \"./components/Search/Search\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { QueryClientProvider, QueryClient } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <Search />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}