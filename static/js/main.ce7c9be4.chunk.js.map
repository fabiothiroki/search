{"version":3,"sources":["services/Flight/flightService.js","services/Flight/flightResponseFormatter.js","components/FlightCard/FlightCard.js","components/SearchResults/SearchResults.js","services/Airport/airportService.js","components/AirportSelector/AirportSelector.js","components/Search/constants.js","components/Search/Search.js","services/Airport/searchResultsFormatter.js","components/App/App.js","index.js"],"names":["getFlights","parameters","Promise","resolve","params","URLSearchParams","partner","limit","fetch","toString","then","response","json","flightResponseFormatter","flights","data","map","flight","id","flyFrom","cityFrom","flyTo","cityTo","price","currency","dTimeUTC","aTimeUTC","FlightCard","Card","variant","CardContent","Typography","component","SearchResults","searchParameters","useQuery","defaultProps","getAirportsByTerm","searchTerm","throttled","throttle","formatAirportResults","results","selectedAirport","formattedData","push","locations","concat","AirportSelector","inputLabel","onChange","name","useState","inputValue","setInputValue","setSelectedAirport","Autocomplete","options","getOptionLabel","option","renderInput","TextField","label","onInputChange","_event","newInputValue","_e","airport","value","FORM_FIELDS","ORIGIN","DESTINATION","DEPARTURE_DATE","RETURN_DATE","useStyles","makeStyles","theme","paper","marginTop","spacing","form","width","submit","margin","formLine","Search","onSearchSubmitted","classes","useForm","control","handleSubmit","setValue","errors","formState","className","onSubmit","noValidate","Grid","container","item","xs","sm","defaultValue","rules","required","render","field","type","style","InputLabelProps","shrink","inputProps","Button","data-testid","fullWidth","color","dateFormatter","dateString","Date","toJSON","slice","split","reverse","join","searchResultsFormatter","fly_from","origin","code","fly_to","destination","dateFrom","departureDate","dateTo","return_from","returnDate","return_to","App","setSearchParameters","Container","maxWidth","CssBaseline","search","memo","queryClient","QueryClient","ReactDOM","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.ce7c9be4.chunk.js","sourcesContent":["const defaultPartner = \"skypicker\";\n\nconst getFlights = (parameters) => {\n  if (!parameters) {\n    return Promise.resolve(null);\n  }\n\n  const params = new URLSearchParams({\n    ...parameters,\n    partner: defaultPartner,\n    limit: 10,\n  });\n\n  return fetch(\n    `https://api.skypicker.com/flights?${params.toString()}`\n  ).then((response) => response.json());\n};\n\nexport default getFlights;\n","const flightResponseFormatter = (flights) => {\n  if (!flights) {\n    return null;\n  }\n\n  return flights.data.map((flight) => ({\n    id: flight.id,\n    flyFrom: flight.flyFrom,\n    cityFrom: flight.cityFrom,\n    flyTo: flight.flyTo,\n    cityTo: flight.cityTo,\n    price: `${flight.price} ${flights.currency}`,\n    dTimeUTC: flight.dTimeUTC,\n    aTimeUTC: flight.aTimeUTC,\n  }));\n};\n\nexport default flightResponseFormatter;\n","import CardContent from \"@material-ui/core/CardContent\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport PropTypes from \"prop-types\";\n\nconst FlightCard = ({ cityFrom, cityTo }) => (\n  <Card variant=\"outlined\">\n    <CardContent>\n      <Typography variant=\"body2\" component=\"p\">\n        {cityFrom} {\">\"} {cityTo}\n      </Typography>\n    </CardContent>\n  </Card>\n);\n\nFlightCard.propTypes = {\n  cityFrom: PropTypes.string.isRequired,\n  cityTo: PropTypes.string.isRequired,\n};\n\nexport default FlightCard;\n","import PropTypes from \"prop-types\";\nimport { useQuery } from \"react-query\";\nimport getFlights from \"../../services/Flight/flightService\";\nimport flightResponseFormatter from \"../../services/Flight/flightResponseFormatter\";\nimport FlightCard from \"../FlightCard/FlightCard\";\n\nconst SearchResults = ({ searchParameters }) => {\n  const { data } = useQuery([\"flightData\", { searchParameters }], () =>\n    getFlights(searchParameters).then(flightResponseFormatter)\n  );\n\n  if (!data) {\n    return null;\n  }\n\n  return data.map((flight) => (\n    <FlightCard cityFrom={flight.cityFrom} cityTo={flight.cityTo} />\n  ));\n};\n\nSearchResults.propTypes = {\n  searchParameters: PropTypes.exact({\n    fly_from: PropTypes.string.isRequired,\n    fly_to: PropTypes.string.isRequired,\n    dateFrom: PropTypes.string.isRequired,\n    dateTo: PropTypes.string.isRequired,\n    return_from: PropTypes.string.isRequired,\n    return_to: PropTypes.string.isRequired,\n  }),\n};\n\nSearchResults.defaultProps = {\n  searchParameters: null,\n};\n\nexport default SearchResults;\n","const getAirportsByTerm = (searchTerm) =>\n  fetch(\n    `https://api.skypicker.com/locations?location_types=airport&term=${searchTerm}`\n  ).then((response) => response.json());\n\nexport default getAirportsByTerm;\n","import { useState } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport throttle from \"lodash.throttle\";\nimport { useQuery } from \"react-query\";\nimport PropTypes from \"prop-types\";\nimport getAirportsByTerm from \"../../services/Airport/airportService\";\n\nconst throttled = throttle((searchTerm) => getAirportsByTerm(searchTerm), 200);\n\nconst formatAirportResults = (results, selectedAirport) => {\n  const formattedData = [];\n\n  if (selectedAirport) {\n    formattedData.push(selectedAirport);\n  }\n\n  if (results && results.locations) {\n    return formattedData.concat(results.locations);\n  }\n\n  return formattedData;\n};\n\nconst AirportSelector = ({ inputLabel, onChange, name }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedAirport, setSelectedAirport] = useState(null);\n\n  const { data } = useQuery(\n    [\"airportData\", { inputValue, selectedAirport }],\n    () => throttled(inputValue)\n  );\n  return (\n    <Autocomplete\n      options={formatAirportResults(data, selectedAirport)}\n      getOptionLabel={(option) => option.name}\n      renderInput={(params) => (\n        <TextField {...params} label={inputLabel} variant=\"outlined\" />\n      )}\n      onInputChange={(_event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      onChange={(_e, airport) => {\n        setSelectedAirport(airport);\n        if (onChange) {\n          onChange(name, airport);\n        }\n      }}\n      value={selectedAirport}\n    />\n  );\n};\n\nAirportSelector.propTypes = {\n  inputLabel: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default AirportSelector;\n","const FORM_FIELDS = {\n  ORIGIN: \"origin\",\n  DESTINATION: \"destination\",\n  DEPARTURE_DATE: \"departureDate\",\n  RETURN_DATE: \"returnDate\",\n};\n\nexport default FORM_FIELDS;\n","import Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport AirportSelector from \"../AirportSelector/AirportSelector\";\nimport FORM_FIELDS from \"./constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(4),\n  },\n  form: {\n    width: \"100%\",\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  formLine: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst Search = ({ onSearchSubmitted }) => {\n  const classes = useStyles();\n  const {\n    control,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => onSearchSubmitted(data);\n\n  return (\n    <div className={classes.paper}>\n      <Typography component=\"h1\" variant=\"h5\">\n        Search Flights\n      </Typography>\n\n      <form onSubmit={handleSubmit(onSubmit)} noValidate>\n        <Grid container spacing={2} className={classes.formLine}>\n          <Grid item xs={12} sm={6}>\n            <Controller\n              name={FORM_FIELDS.ORIGIN}\n              control={control}\n              defaultValue={null}\n              rules={{ required: true }}\n              render={() => (\n                <AirportSelector\n                  name={FORM_FIELDS.ORIGIN}\n                  inputLabel=\"From\"\n                  onChange={setValue}\n                />\n              )}\n            />\n            {errors[FORM_FIELDS.DESTINATION] && \"From is required\"}\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Controller\n              name={FORM_FIELDS.DESTINATION}\n              control={control}\n              defaultValue={null}\n              rules={{ required: true }}\n              render={() => (\n                <AirportSelector\n                  name={FORM_FIELDS.DESTINATION}\n                  inputLabel=\"To\"\n                  onChange={setValue}\n                />\n              )}\n            />\n            {errors[FORM_FIELDS.DESTINATION] && \"To is required\"}\n          </Grid>\n        </Grid>\n\n        <Grid container spacing={2} className={classes.formLine}>\n          <Grid item xs={12} sm={6}>\n            <Controller\n              name={FORM_FIELDS.DEPARTURE_DATE}\n              control={control}\n              defaultValue=\"\"\n              rules={{ required: true }}\n              render={({ field: { onChange, value } }) => (\n                <TextField\n                  name={FORM_FIELDS.DEPARTURE_DATE}\n                  label=\"Departure\"\n                  type=\"date\"\n                  style={{ width: \"100%\" }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  inputProps={{\n                    \"data-testid\": FORM_FIELDS.DEPARTURE_DATE,\n                  }}\n                  onChange={onChange}\n                  value={value}\n                />\n              )}\n            />\n            {errors[FORM_FIELDS.DEPARTURE_DATE] && \"Departure date is required\"}\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Controller\n              name={FORM_FIELDS.RETURN_DATE}\n              control={control}\n              defaultValue=\"\"\n              rules={{ required: true }}\n              render={({ field: { onChange, value } }) => (\n                <TextField\n                  name={FORM_FIELDS.RETURN_DATE}\n                  label=\"Return\"\n                  type=\"date\"\n                  style={{ width: \"100%\" }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  inputProps={{\n                    \"data-testid\": FORM_FIELDS.RETURN_DATE,\n                  }}\n                  onChange={onChange}\n                  value={value}\n                />\n              )}\n            />\n            {errors[FORM_FIELDS.RETURN_DATE] && \"Return date is required\"}\n          </Grid>\n        </Grid>\n\n        <Button\n          data-testid=\"submitButton\"\n          className={classes.submit}\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Search\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nSearch.propTypes = {\n  onSearchSubmitted: PropTypes.func.isRequired,\n};\n\nexport default Search;\n","const dateFormatter = (dateString) =>\n  new Date(dateString).toJSON().slice(0, 10).split(\"-\").reverse().join(\"/\");\n\nconst searchResultsFormatter = (parameters) => ({\n  fly_from: parameters.origin?.code,\n  fly_to: parameters.destination?.code,\n  dateFrom: dateFormatter(parameters.departureDate),\n  dateTo: dateFormatter(parameters.departureDate),\n  return_from: dateFormatter(parameters.returnDate),\n  return_to: dateFormatter(parameters.returnDate),\n});\n\nexport default searchResultsFormatter;\n","import { memo, useState } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\n\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Search from \"../Search/Search\";\nimport searchResultsFormatter from \"../../services/Airport/searchResultsFormatter\";\n\nconst App = () => {\n  const [searchParameters, setSearchParameters] = useState(null);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <Search\n        onSearchSubmitted={(search) =>\n          setSearchParameters(searchResultsFormatter(search))\n        }\n      />\n      <SearchResults searchParameters={searchParameters} />\n    </Container>\n  );\n};\n\nexport default memo(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { QueryClientProvider, QueryClient } from \"react-query\";\nimport App from \"./components/App/App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}