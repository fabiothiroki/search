{"version":3,"sources":["components/AirportSelector/AirportSelector.js","services/AirportService/airportService.js","components/Search/constants.js","components/Search/Search.js","components/SearchResults/SearchResults.js","components/App/App.js","components/SearchResults/searchResultsFormatter.js","reportWebVitals.js","index.js"],"names":["throttled","throttle","searchTerm","fetch","then","response","json","getAirportsByTerm","formatAirportResults","results","selectedAirport","formattedData","push","locations","concat","AirportSelector","inputLabel","onError","onChange","name","useState","inputValue","setInputValue","setSelectedAirport","useQuery","error","data","Autocomplete","options","getOptionLabel","option","renderInput","params","TextField","label","variant","onInputChange","_event","newInputValue","_e","airport","value","FORM_FIELDS","useStyles","makeStyles","theme","paper","marginTop","spacing","form","width","submit","margin","formLine","Search","onSearchSubmitted","classes","useForm","control","handleSubmit","setValue","errors","formState","className","Typography","component","onSubmit","noValidate","Grid","container","item","xs","sm","defaultValue","rules","required","render","field","type","style","InputLabelProps","shrink","Button","fullWidth","color","SearchResults","searchParameters","JSON","stringify","App","setSearchParameters","Container","maxWidth","CssBaseline","search","parameters","fly_from","origin","code","fly_to","destination","dateFrom","departureDate","dateTo","return_from","returnDate","return_to","partner","searchResultsFormatter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.e1d598e9.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { getAirportsByTerm } from \"../../services/AirportService/airportService\";\nimport throttle from \"lodash.throttle\";\nimport { useQuery } from \"react-query\";\nimport PropTypes from \"prop-types\";\n\nconst throttled = throttle((searchTerm) => getAirportsByTerm(searchTerm), 200);\n\nconst formatAirportResults = (results, selectedAirport) => {\n  const formattedData = [];\n\n  if (selectedAirport) {\n    formattedData.push(selectedAirport);\n  }\n\n  if (results && results.locations) {\n    return formattedData.concat(results.locations);\n  }\n\n  return formattedData;\n};\n\nexport const AirportSelector = ({ inputLabel, onError, onChange, name }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedAirport, setSelectedAirport] = useState(null);\n\n  const { error, data } = useQuery(\n    [\"airportData\", { inputValue, selectedAirport }],\n    () => throttled(inputValue)\n  );\n\n  if (error) {\n    onError(error);\n  }\n\n  return (\n    <Autocomplete\n      options={formatAirportResults(data, selectedAirport)}\n      getOptionLabel={(option) => option.name}\n      renderInput={(params) => (\n        <TextField {...params} label={inputLabel} variant=\"outlined\" />\n      )}\n      onInputChange={(_event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      onChange={(_e, airport) => {\n        setSelectedAirport(airport);\n        if (onChange) {\n          onChange(name, airport);\n        }\n      }}\n      value={selectedAirport}\n    />\n  );\n};\n\nAirportSelector.propTypes = {\n  inputLabel: PropTypes.string,\n  onError: PropTypes.func,\n  onChange: PropTypes.func,\n  name: PropTypes.string.isRequired,\n};\n","export const getAirportsByTerm = (searchTerm) => {\n  return fetch(\n    `https://api.skypicker.com/locations?location_types=airport&term=${searchTerm}`\n  ).then((response) => response.json());\n};\n","export const FORM_FIELDS = {\n  ORIGIN: \"origin\",\n  DESTINATION: \"destination\",\n  DEPARTURE_DATE: \"departureDate\",\n  RETURN_DATE: \"returnDate\",\n};\n","import Typography from \"@material-ui/core/Typography\";\nimport { AirportSelector } from \"../AirportSelector/AirportSelector\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport { FORM_FIELDS } from \"./constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(4),\n  },\n  form: {\n    width: \"100%\",\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  formLine: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport const Search = ({ onSearchSubmitted }) => {\n  const classes = useStyles();\n  const {\n    control,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => onSearchSubmitted(data);\n\n  return (\n    <div className={classes.paper}>\n      <Typography component=\"h1\" variant=\"h5\">\n        Search Flights\n      </Typography>\n\n      <form onSubmit={handleSubmit(onSubmit)} noValidate>\n        <Grid container spacing={2} className={classes.formLine}>\n          <Grid item xs={12} sm={6}>\n            <Controller\n              name={FORM_FIELDS.ORIGIN}\n              control={control}\n              defaultValue={null}\n              rules={{ required: true }}\n              render={() => (\n                <AirportSelector\n                  name={FORM_FIELDS.ORIGIN}\n                  inputLabel=\"From\"\n                  onChange={setValue}\n                />\n              )}\n            />\n            {errors[FORM_FIELDS.DESTINATION] && \"From is required\"}\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Controller\n              name={FORM_FIELDS.DESTINATION}\n              control={control}\n              defaultValue={null}\n              rules={{ required: true }}\n              render={() => (\n                <AirportSelector\n                  name={FORM_FIELDS.DESTINATION}\n                  inputLabel=\"To\"\n                  onChange={setValue}\n                />\n              )}\n            />\n            {errors[FORM_FIELDS.DESTINATION] && \"To is required\"}\n          </Grid>\n        </Grid>\n\n        <Grid container spacing={2} className={classes.formLine}>\n          <Grid item xs={12} sm={6}>\n            <Controller\n              name={FORM_FIELDS.DEPARTURE_DATE}\n              control={control}\n              defaultValue={\"\"}\n              rules={{ required: true }}\n              render={({ field: { onChange, value } }) => (\n                <TextField\n                  name={FORM_FIELDS.DEPARTURE_DATE}\n                  label=\"Departure\"\n                  type=\"date\"\n                  style={{ width: \"100%\" }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={onChange}\n                  value={value}\n                />\n              )}\n            />\n            {errors[FORM_FIELDS.DEPARTURE_DATE] && \"Departure date is required\"}\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Controller\n              name={FORM_FIELDS.RETURN_DATE}\n              control={control}\n              defaultValue={\"\"}\n              rules={{ required: true }}\n              render={({ field: { onChange, value } }) => (\n                <TextField\n                  name={FORM_FIELDS.RETURN_DATE}\n                  label=\"Return\"\n                  type=\"date\"\n                  style={{ width: \"100%\" }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={onChange}\n                  value={value}\n                />\n              )}\n            />\n            {errors[FORM_FIELDS.RETURN_DATE] && \"Return date is required\"}\n          </Grid>\n        </Grid>\n\n        <Button\n          className={classes.submit}\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Search\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nSearch.propTypes = {\n  onSearchSubmitted: PropTypes.func.isRequired,\n};\n","export const SearchResults = ({ searchParameters }) => {\n  return (\n    <>\n      <p>{JSON.stringify(searchParameters, null, 2)}</p>\n    </>\n  );\n};\n","import { Search } from \"../Search/Search\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { useState } from \"react\";\nimport { searchResultsFormatter } from \"../SearchResults/searchResultsFormatter\";\n\nexport const App = () => {\n  const [searchParameters, setSearchParameters] = useState({});\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <Search\n        onSearchSubmitted={(search) =>\n          setSearchParameters(searchResultsFormatter(search))\n        }\n      />\n      <SearchResults searchParameters={searchParameters} />\n    </Container>\n  );\n};\n","const defaultPartner = \"skypicker\";\n\nexport const searchResultsFormatter = (parameters) => {\n  return {\n    fly_from: parameters.origin?.code,\n    fly_to: parameters.destination?.code,\n    dateFrom: parameters.departureDate,\n    dateTo: parameters.departureDate,\n    return_from: parameters.returnDate,\n    return_to: parameters.returnDate,\n    partner: defaultPartner,\n  };\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { QueryClientProvider, QueryClient } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}